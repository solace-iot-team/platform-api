{
	"info": {
		"_postman_id": "27d6a9b3-d711-47cf-9137-e2a2a44b724d",
		"name": "APIM Connector Regression Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1386967"
	},
	"item": [
		{
			"name": "01 Setup",
			"item": [
				{
					"name": "Create Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{01_Setup_ETag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\": {\n\t\t\"eventPortal\": {\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0/eventPortal\"\n\n\t\t},\n\t\t\"cloud\":{\n\t\t\t\"baseUrl\": \"{{CLOUD_BASE_URL}}\",\n            \"token\":\"{{CLOUD_TOKEN}}\"\n\t\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Org Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Preconiditon Failed\", function () {",
									"    pm.response.to.have.status(412);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{01_Setup_ETag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\": \"{{CLOUD_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Dev Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{CONNECTOR_ENV}}\",\n  \"description\": \"{{CONNECTOR_ENV}} environment\",\n  \"serviceId\": \"{{BROKER_ID}}\",\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    }\n  ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_API_ETag\", headerValue);",
									"    pm.globals.set(\"01_Setup_API_Body\", pm.response.text());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH API Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{01_Setup_API_ETag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "---\ncomponents:\n  schemas:\n    SensorEvent:\n      \"$schema\": http://json-schema.org/draft-04/schema#\n      description: ''\n      type: object\n      properties:\n        communicationDate:\n          type: integer\n        signedCommunication:\n          type: boolean\n        events:\n          type: array\n          items:\n          - type: string\n          - type: array\n            items:\n            - type: object\n              properties:\n                tripPlanId:\n                  type: integer\n                sensorName:\n                  type: string\n                communicationType:\n                  type: string\n                eventType:\n                  type: string\n                gps:\n                  type: string\n                sensorValues:\n                  type: array\n                  items:\n                  - type: string\n                  - type: object\n                    properties:\n                      Uncertainty:\n                        type: string\n                      Compass Direction:\n                        type: string\n                    required:\n                    - Uncertainty\n                    - Compass Direction\n                sensorValue:\n                  type: string\n                deviceSerialNumber:\n                  type: string\n                eventDate:\n                  type: integer\n                sensorId:\n                  type: integer\n              required:\n              - deviceSerialNumber\n              - eventDate\n              - eventType\n              - communicationType\n              - gps\n              - sensorName\n              - sensorValue\n              - sensorValues\n              - tripPlanId\n              - sensorId\n        deviceSerialNumber:\n          type: string\n        validatedSignature:\n          type: boolean\n      required:\n      - events\n      - deviceSerialNumber\n      - communicationDate\n      - signedCommunication\n      - validatedSignature\n  messages:\n    GeoSensorEvent:\n      payload:\n        \"$ref\": \"#/components/schemas/SensorEvent\"\n      description: My Description\n      schemaFormat: application/vnd.aai.asyncapi+json;version=2.0.0\n      contentType: application/json\n    SensorEvent:\n      payload:\n        \"$ref\": \"#/components/schemas/SensorEvent\"\n      description: ''\n      schemaFormat: application/vnd.aai.asyncapi+json;version=2.0.0\n      contentType: application/json\nservers: {}\nchannels:\n  traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}:\n    publish:\n      message:\n        \"$ref\": \"#/components/messages/SensorEvent\"\n    parameters:\n      shippingline:\n        schema:\n          type: string\n      sensor:\n        schema:\n          type: string\n          enum:\n          - HUMIDITY\n          - LIGHT\n          - DOOR\n          - GEOFENCE\n      sensorvalue:\n        schema:\n          type: string\n      equipmentId:\n        schema:\n          type: string\n  traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}:\n    publish:\n      message:\n        \"$ref\": \"#/components/messages/GeoSensorEvent\"\n    parameters:\n      geosensor:\n        schema:\n          type: string\n          enum:\n          - GEOPOSITIONING\n      shippingline:\n        schema:\n          type: string\n      equipmentId:\n        schema:\n          type: string\n      longitude:\n        schema:\n          type: string\nasyncapi: 2.0.0\ninfo:\n  x-generated-time: 2021-07-15 15:03 UTC\n  description: ''\n  title: WebSub API\n  x-view: provider\n  version: '2'\n  x-origin:\n    vendor: solace\n    name: event-portal\n",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH API Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Precondition failed\", function () {",
									"    pm.response.to.have.status(412);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{01_Setup_API_ETag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{01_Setup_API_Body}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01 Deprovision-No-Products-WebhookEnvs",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{APP_NAME}}_PRODUCT\",\n  \"displayName\": \"{{APP_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{APP_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",  \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{APP_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"webHooks\": [\n    {\n      \"uri\": \"https://mock.com.local/callback\",\n      \"environments\": [\n        \"{{CONNECTOR_ENV}}\"\n      ],\n      \"method\": \"POST\",\n      \"mode\": \"parallel\",\n      \"authentication\": {\n        \"username\": \"donald\",\n        \"password\": \"duck1234\"\n      }\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove API Product from App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No API Product present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.apiProducts).to.length.lt(1);",
									"});",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"{{APP_NAME}}\",\n  \"apiProducts\": [\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{APP_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{APP_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{CONNECTOR_PASSWORD}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{CONNECTOR_USERNAME}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "01 Reprovision-No-Products-WebhookEnvs",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{APP_NAME}}_PRODUCT\",\n  \"displayName\": \"{{APP_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{APP_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",  \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{APP_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"webHooks\": [\n    {\n      \"uri\": \"https://mock.com.local/callback\",\n      \"environments\": [\n        \"{{CONNECTOR_ENV}}\"\n      ],\n      \"method\": \"POST\",\n      \"mode\": \"parallel\",\n      \"authentication\": {\n        \"username\": \"donald\",\n        \"password\": \"duck12324\"\n      }\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Subscriptions Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Body contains subscribe exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"traxens/feed/*/v1/E1/*/>\");",
									"});",
									"pm.test(\"Body contains subscribe exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"traxens/feed/*/v1/E2/*/>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove API Product from App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No API Product present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.apiProducts).to.length.lt(1);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"{{APP_NAME}}\",\n  \"apiProducts\": [\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check API Product Removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No API Product present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.apiProducts).to.length.lt(1);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"{{APP_NAME}}\",\n  \"apiProducts\": [\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Exceptions removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Body does not contain subscribe exception\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"traxens/feed/*/v1/E1/*/>\");",
									"});",
									"pm.test(\"Body does not contain subscribe exception\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"traxens/feed/*/v1/E2/*/>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{APP_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{APP_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{CONNECTOR_PASSWORD}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{CONNECTOR_USERNAME}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "01 App-No-Products-No-Provisioning",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{APP_NAME}}_PRODUCT\",\n  \"displayName\": \"{{APP_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{APP_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (no product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",  \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"webHooks\": [\n    {\n      \"uri\": \"https://mock.com.local/callback\",\n      \"environments\": [\n        \"{{CONNECTOR_ENV}}\"\n      ],\n      \"method\": \"POST\",\n      \"mode\": \"parallel\",\n      \"authentication\": {\n        \"username\": \"donald\",\n        \"password\": \"duck1234\"\n      }\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Subscriptions Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL name is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"",
									"pm.test(\"Includes NOT FOUND\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{APP_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{APP_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{CONNECTOR_PASSWORD}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{CONNECTOR_USERNAME}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "01 Tear Down",
			"item": [
				{
					"name": "Delete API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{CONNECTOR_ENV}}\",\n  \"description\": \"{{CONNECTOR_ENV}} environment\",\n  \"serviceId\": \"{{BROKER_ID}}\",\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\": \"{{CLOUD_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "General Setup",
			"item": [
				{
					"name": "Create Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\": {\n\t\t\"eventPortal\": {\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0/eventPortal\",\n            \"token\": \"{{EP_TOKEN}}\"\n\n\t\t},\n\t\t\"cloud\":{\n\t\t\t\"baseUrl\": \"{{CLOUD_BASE_URL}}\",\n            \"token\":\"{{CLOUD_TOKEN}}\"\n\t\t}\n  },\n  \"integrations\": {\n    \"notifications\": {\n      \"baseUrl\": \"https://mr1i5g7tif6z9h.messaging.solace.cloud:9443/apim\",\n      \"authentication\": {\n        \"userName\": \"solace-cloud-client\",\n        \"password\": \"enfe56t36gbp4evn4hner9grmh\"\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Dev Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{CONNECTOR_ENV}}\",\n  \"displayName\": \"{{CONNECTOR_ENV}} display\",\n  \"description\": \"{{CONNECTOR_ENV}} environment\",\n  \"serviceId\": \"{{BROKER_ID}}\",\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n   },\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Prod Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{PROD_CONNECTOR_ENV}}\",\n  \"description\": \"{{PROD_CONNECTOR_ENV}} environment\",\n  \"serviceId\": \"{{PROD_BROKER_ID}}\",\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    },\n    {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Async APi is stored unchanged\", function () {",
									"",
									"    const r = JSON.parse(request.data);",
									"    console.log(r);",
									"    const secondResponse = pm.response.json();",
									"",
									"    const isEqual = _.isEqual(r, secondResponse);",
									"    pm.expect(isEqual).to.be.true;",
									"//    pm.response.to.have.body(request.data);",
									"});",
									"",
									"pm.test(\"No x-parser additions\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"x-parser-original-schema-format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1.0.0\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add API SayHelloPub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "components:\n  schemas:\n    HelloWorldSayHello: &ref_0\n      default: {}\n      $schema: http://json-schema.org/draft-07/schema\n      examples:\n        - greeting: hello\n          name: solace\n      description: A simple hello world schema\n      additionalProperties: false\n      type: object\n      title: The root schema\n      required:\n        - greeting\n        - name\n      properties:\n        greeting:\n          default: ''\n          examples:\n            - hello\n          description: The greeting\n          type: string\n          title: The greeting schema\n          $id: '#/properties/greeting'\n        name:\n          default: ''\n          examples:\n            - solace\n          description: The name.\n          type: string\n          title: The name schema\n          $id: '#/properties/name'\n      $id: http://example.com/example.json\n      x-parser-schema-id: HelloWorldSayHello\n  messages:\n    SayHello: &ref_1\n      payload: *ref_0\n      description: ''\n      schemaFormat: application/vnd.aai.asyncapi;version=2.0.0\n      contentType: application/json\nchannels:\n  say/hello:\n    publish:\n      message: *ref_1\nasyncapi: 2.0.0\ninfo:\n  description: ''\n  title: SayHelloPub\n  x-view: provider\n  version: '1'\n  x-origin:\n    vendor: solace\n    name: event-portal\nx-parser-spec-parsed: true",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/SayHelloPub",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"SayHelloPub"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add API SayHello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "components:\n  schemas:\n    HelloWorldSayHello: &ref_0\n      default: {}\n      $schema: http://json-schema.org/draft-07/schema\n      examples:\n        - greeting: hello\n          name: solace\n      description: <p>A simple hello world schema</p>\n      additionalProperties: false\n      type: object\n      title: The root schema\n      required:\n        - greeting\n        - name\n      properties:\n        greeting:\n          default: ''\n          examples:\n            - hello\n          description: The greeting\n          type: string\n          title: The greeting schema\n          $id: '#/properties/greeting'\n        name:\n          default: ''\n          examples:\n            - solace\n          description: The name.\n          type: string\n          title: The name schema\n          $id: '#/properties/name'\n      $id: http://example.com/example.json\n      x-parser-schema-id: HelloWorldSayHello\n  messages:\n    SayHello: &ref_1\n      payload: *ref_0\n      description: ''\n      schemaFormat: application/vnd.aai.asyncapi;version=2.0.0\n      contentType: application/json\nchannels:\n  say/hello:\n    subscribe:\n      message: *ref_1\nasyncapi: 2.0.0\ninfo:\n  description: This API says hello --- Hello\n  title: SayHello\n  x-view: provider\n  version: v1\n  x-origin:\n    vendor: solace\n    name: event-portal\nx-parser-spec-parsed: true",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/SayHello",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"SayHello"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{CONNECTOR_PASSWORD}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{CONNECTOR_USERNAME}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02 Test Queue Created",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Queue name is in app response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"client information included\", function () {",
									"    var jsonData = pm.response.json();",
									"     var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(jsonData.clientInformation[0].guaranteedMessaging.name).to.eql(queueName);",
									";",
									"});",
									"",
									"pm.test(\"Has queue TTL\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"maxTtl\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch ApiProduct (remove queue)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": false,\n      \"accessType\": \"exclusive\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch App (with product) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Queue name missing in app response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"client information not included\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clientInformation).to.eql(undefined);",
									";",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Not present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03 Async API Bindings - smf",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Generated Async API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains JMS binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"bindings:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"jms:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    pm.expect(pm.response.text()).to.include(\"exclusive\");",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"",
									" });",
									"",
									" pm.test(\"Contains MQTT binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"bindings:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"mqtt:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"qos:\");",
									"",
									" });",
									"",
									"",
									" pm.test(\"Contains Solace binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"bindings:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"solace:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    pm.expect(pm.response.text()).to.include(\"exclusive\");",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"",
									" });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/{{API_NAME}}?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04 Prod Multiple Envs Provisioning",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"prod\",\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod Broker ACL Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Dev Broker ACL Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is not present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod Broker ACL Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is not present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05 Attemp to create duplicate App",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Duplicate\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "06 Health Test",
			"item": [
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/healthcheck",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "Liveliness",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HEALTH_BASEURL}}/liveliness",
							"host": [
								"{{HEALTH_BASEURL}}"
							],
							"path": [
								"liveliness"
							]
						}
					},
					"response": []
				},
				{
					"name": "ABout API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"APIS_PROXY_MODE\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/about",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"about"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "07 PATCH API",
			"item": [
				{
					"name": "Update API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not allowed to patch API with same version number\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1.0.0\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "08 Get App's Async API",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API spec no format requested",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check version of API\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.info.version).to.eql(\"1.0.0\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains SensorEvent\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SensorEvent\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API spec JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check version of API\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.info.version).to.eql(\"1.0.0\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains SensorEvent\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SensorEvent\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/{{API_NAME}}?format=application%2Fjson",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fjson"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API spec YAML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"API_YAML\"));",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/x-yaml');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/{{API_NAME}}?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "09 PATCH Env Disallow name change",
			"item": [
				{
					"name": "Patch Prod Failure (env name not changeable)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message concerns body.name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].path).to.eql(\".body.name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{PROD_CONNECTOR_ENV}}\",\n  \"description\": \"{{PROD_CONNECTOR_ENV}} environment\",\n  \"displayName\": \"{{PROD_CONNECTOR_ENV}} environment\",\n \"exposedProtocols\": [\n  {\n   \"name\": \"secure-mqtt\",\n   \"version\": \"3.1.1\"\n  },\n  {\n   \"name\": \"wss-mqtt\",\n   \"version\": \"3.1.1\"\n  },\n  {\n   \"name\": \"secure-jms\",\n   \"version\": \"1.1\"\n  },\n  {\n   \"name\": \"https\",\n   \"version\": \"1.1\"\n  },\n  {\n   \"name\": \"amqps\",\n   \"version\": \"1.0.0\"\n  },\n  {\n   \"name\": \"smfs\",\n   \"version\": \"smfs\"\n  },\n  {\n   \"name\": \"compressed-smf\",\n   \"version\": \"smf\"\n  }\n ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{PROD_CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{PROD_CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10 Create product with different protocols in envs",
			"item": [
				{
					"name": "Patch Prod exposed protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Request\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"exposedProtocols\": [\n  {\n   \"name\": \"secure-mqtt\",\n   \"version\": \"3.1.1\"\n  },\n  {\n   \"name\": \"wss-mqtt\",\n   \"version\": \"3.1.1\"\n  },\n  {\n   \"name\": \"secure-jms\",\n   \"version\": \"1.1\"\n  },\n  {\n   \"name\": \"https\",\n   \"version\": \"1.1\"\n  },\n  {\n   \"name\": \"amqps\",\n   \"version\": \"1.0.0\"\n  },\n  {\n   \"name\": \"smfs\",\n   \"version\": \"smfs\"\n  },\n  {\n   \"name\": \"compressed-smf\",\n   \"version\": \"smf\"\n  }\n ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{PROD_CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{PROD_CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Dev exposed protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Request\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"exposedProtocols\": [\n  {\n   \"name\": \"mqtt\",\n   \"version\": \"3.1.1\"\n  },\n  {\n   \"name\": \"wss-mqtt\",\n   \"version\": \"3.1.1\"\n  },\n  {\n   \"name\": \"secure-jms\",\n   \"version\": \"1.1\"\n  },\n  {\n   \"name\": \"https\",\n   \"version\": \"1.1\"\n  },\n  {\n   \"name\": \"amqps\",\n   \"version\": \"1.0.0\"\n  },\n  {\n   \"name\": \"smfs\",\n   \"version\": \"smfs\"\n  },\n  {\n   \"name\": \"compressed-smf\",\n   \"version\": \"smf\"\n  }\n ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\",\n    \"prod\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n     {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11 Patch App WSO2",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT2\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT2\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST APP",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"{{APP_NAME}}\",\"displayName\":\"deleteApp\",\"apiProducts\":[\"{{API_NAME}}_PRODUCT2\"],\"credentials\":{\"issuedAt\":0,\"secret\":{\"consumerSecret\":\"deleteApp-application-secret\",\"consumerKey\":\"deleteApp-application-key\"},\"expiresAt\":-1}, \"internalName\":\"{{APP_NAME_INTERNAL}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker User Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/clientUsernames/deleteApp-application-key",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"clientUsernames",
								"deleteApp-application-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH APP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"credentials\":{\"issuedAt\":0,\"secret\":{\"consumerSecret\":\"tr5yu2ZskGB3BcCfFMz3XPRzrRwa\",\"consumerKey\":\"8bWvl9dSniT5noxqlCoOR0s1EHca\"},\"expiresAt\":-1}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker User Present Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/clientUsernames/8bWvl9dSniT5noxqlCoOR0s1EHca",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"clientUsernames",
								"8bWvl9dSniT5noxqlCoOR0s1EHca"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker User Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include('NOT_FOUND');",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/clientUsernames/deleteApp-application-key",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"clientUsernames",
								"deleteApp-application-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE APP",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"cea30861-aca1-4f3a-a3b5-870d82324934\",\"displayName\":\"deleteApp\",\"apiProducts\":[\"devEnv-Demo2Api-demo2-2.0\"],\"credentials\":{\"issuedAt\":0,\"secret\":{\"consumerSecret\":\"deleteApp-application-secret\",\"consumerKey\":\"deleteApp-application-key\"},\"expiresAt\":-1}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker User Missing Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include('NOT_FOUND');",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/clientUsernames/8bWvl9dSniT5noxqlCoOR0s1EHca",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"clientUsernames",
								"8bWvl9dSniT5noxqlCoOR0s1EHca"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "12Patch App ACL Profile Name not set",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT2\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT2\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST APP",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"expiresIn\":-1,\"credentials\":{\"issuedAt\":0,\"secret\":{\"consumerSecret\":\"AppregreTest2-application-secret\",\"consumerKey\":\"AppregreTest2-application-key\"},\"expiresAt\":-1},\"displayName\":\"AppregreTest2\",\"name\":\"68d6b329-a631-428a-98c0-939050fa8dcc\",\"apiProducts\":[\"{{API_NAME}}_PRODUCT2\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker User Present Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"AppregreTest2-application-key\");",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/clientUsernames/AppregreTest2-application-key",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"clientUsernames",
								"AppregreTest2-application-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH APP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"credentials\":{\"issuedAt\":0,\"secret\":{\"consumerSecret\":\"cDDhp2i_1Urak6kYfLXdc7A7Hc4a\",\"consumerKey\":\"ELHzRV9U7F_SccXDtCYmNiAbqkIa\"},\"expiresAt\":-1}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/68d6b329-a631-428a-98c0-939050fa8dcc",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"68d6b329-a631-428a-98c0-939050fa8dcc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker User Present Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ELHzRV9U7F_SccXDtCYmNiAbqkIa\");",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/clientUsernames/ELHzRV9U7F_SccXDtCYmNiAbqkIa",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"clientUsernames",
								"ELHzRV9U7F_SccXDtCYmNiAbqkIa"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE APP",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"cea30861-aca1-4f3a-a3b5-870d82324934\",\"displayName\":\"deleteApp\",\"apiProducts\":[\"devEnv-Demo2Api-demo2-2.0\"],\"credentials\":{\"issuedAt\":0,\"secret\":{\"consumerSecret\":\"deleteApp-application-secret\",\"consumerKey\":\"deleteApp-application-key\"},\"expiresAt\":-1}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/68d6b329-a631-428a-98c0-939050fa8dcc",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"68d6b329-a631-428a-98c0-939050fa8dcc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "13 Webhook No Auth",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  },\n  \"webHooks\":\n    [{\"uri\": \"http://www.solace.com:80\", \"method\":\"POST\"}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "14 Validate Unique Permissions",
			"item": [
				{
					"name": "Add Test API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"AcmeApiError-1\": {\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme Api Error\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\"timestamp\"],\n            \"properties\": {\"timestamp\": {\"type\": \"string\"}}\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"errorId\",\n              \"errorDetails\"\n            ],\n            \"properties\": {\n              \"errorId\": {\n                \"title\": \"errorId\",\n                \"type\": \"string\"\n              },\n              \"errorDetails\": {\n                \"title\": \"errorDetails\",\n                \"type\": \"object\"\n              }\n            }\n          }\n        }\n      },\n      \"AcmeOrder\": {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme New Order event\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\"timestamp\"],\n            \"properties\": {\"timestamp\": {\"type\": \"string\"}}\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"bu_id\",\n              \"order_id\",\n              \"details\"\n            ],\n            \"properties\": {\n              \"details\": {\n                \"title\": \"order details\",\n                \"type\": \"object\"\n              },\n              \"bu_id\": {\n                \"title\": \"business unit\",\n                \"type\": \"string\"\n              },\n              \"order_id\": {\n                \"title\": \"order_id\",\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"$id\": \"http://localhost:8811/acme/new-order.schema.json\"\n      }\n    },\n    \"messages\": {\n      \"AcmeNewOrder\": {\n        \"payload\": {\"$ref\": \"#/components/schemas/AcmeOrder\"},\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeApiError\": {\n        \"payload\": {\"$ref\": \"#/components/schemas/AcmeApiError-1\"},\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeUpdateOrder\": {\n        \"payload\": {\"$ref\": \"#/components/schemas/AcmeOrder\"},\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"acme/apim/{bu_id}/{order_id}/update\": {\n      \"subscribe\": {\"message\": {\"$ref\": \"#/components/messages/AcmeUpdateOrder\"}},\n      \"parameters\": {\n        \"bu_id\": {\"schema\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"auto\",\n            \"whitegoods\",\n            \"e_bike\"\n          ]\n        }},\n        \"order_id\": {\"schema\": {\"type\": \"string\"}}\n      }\n    },\n    \"acme/apim/error\": {\"subscribe\": {\"message\": {\"$ref\": \"#/components/messages/AcmeApiError\"}}},\n    \"acme/apim/{bu_id}/create\": {\n      \"subscribe\": {\"message\": {\"$ref\": \"#/components/messages/AcmeNewOrder\"}},\n      \"parameters\": {\"bu_id\": {\"schema\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"auto\",\n          \"whitegoods\",\n          \"e_bike\"\n        ]\n      }}}\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-09-12 10:01 UTC\",\n    \"description\": \"Order Notifications.\\n\\n---\\n\\n\",\n    \"title\": \"AcmeOrderNotifications\",\n    \"x-view\": \"provider\",\n    \"version\": \"1\"\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/RegressionOrderNotifications",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"RegressionOrderNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"RegressionOrderNotifications\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"AcmeOrderNotifications_PRODUCT\",\n  \"displayName\": \"AcmeOrderNotifications_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"AcmeOrderNotifications_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"AcmeOrderNotifications_APP\",\n  \"internalName\": \"AcmeOrderNotifications_APP\",    \n  \"displayName\": \"AcmeOrderNotifications App\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"AcmeOrderNotifications_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"AcmeOrderNotifications1\",\n      \"consumerSecret\": \"AcmeOrderNotifications1\"\n    }\n  },\n  \"webHooks\":\n    [{\"uri\": \"http://www.solace.com:80\", \"method\":\"POST\"}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App Premissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has unique permissions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].permissions.subscribe[1]['acme/apim/error'].permissions.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/AcmeOrderNotifications_APP",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"AcmeOrderNotifications_APP"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/AcmeOrderNotifications_APP",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"AcmeOrderNotifications_APP"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/AcmeOrderNotifications_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"AcmeOrderNotifications_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Test API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/RegressionOrderNotifications",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"RegressionOrderNotifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "15 Get AsyncAPI specs multiple products",
			"item": [
				{
					"name": "Add OrderNotifications API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"AcmeApiError-1\": {\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme Api Error\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\"timestamp\"],\n            \"properties\": {\"timestamp\": {\"type\": \"string\"}}\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"errorId\",\n              \"errorDetails\"\n            ],\n            \"properties\": {\n              \"errorId\": {\n                \"title\": \"errorId\",\n                \"type\": \"string\"\n              },\n              \"errorDetails\": {\n                \"title\": \"errorDetails\",\n                \"type\": \"object\"\n              }\n            }\n          }\n        }\n      },\n      \"AcmeOrder\": {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme New Order event\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\"timestamp\"],\n            \"properties\": {\"timestamp\": {\"type\": \"string\"}}\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"bu_id\",\n              \"order_id\",\n              \"details\"\n            ],\n            \"properties\": {\n              \"details\": {\n                \"title\": \"order details\",\n                \"type\": \"object\"\n              },\n              \"bu_id\": {\n                \"title\": \"business unit\",\n                \"type\": \"string\"\n              },\n              \"order_id\": {\n                \"title\": \"order_id\",\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"$id\": \"http://localhost:8811/acme/new-order.schema.json\"\n      }\n    },\n    \"messages\": {\n      \"AcmeNewOrder\": {\n        \"payload\": {\"$ref\": \"#/components/schemas/AcmeOrder\"},\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeApiError\": {\n        \"payload\": {\"$ref\": \"#/components/schemas/AcmeApiError-1\"},\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeUpdateOrder\": {\n        \"payload\": {\"$ref\": \"#/components/schemas/AcmeOrder\"},\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"acme/apim/{bu_id}/{order_id}/update\": {\n      \"subscribe\": {\"message\": {\"$ref\": \"#/components/messages/AcmeUpdateOrder\"}},\n      \"parameters\": {\n        \"bu_id\": {\"schema\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"auto\",\n            \"whitegoods\",\n            \"e_bike\"\n          ]\n        }},\n        \"order_id\": {\"schema\": {\"type\": \"string\"}}\n      }\n    },\n    \"acme/apim/error\": {\"subscribe\": {\"message\": {\"$ref\": \"#/components/messages/AcmeApiError\"}}},\n    \"acme/apim/{bu_id}/create\": {\n      \"subscribe\": {\"message\": {\"$ref\": \"#/components/messages/AcmeNewOrder\"}},\n      \"parameters\": {\"bu_id\": {\"schema\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"auto\",\n          \"whitegoods\",\n          \"e_bike\"\n        ]\n      }}}\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-09-12 10:01 UTC\",\n    \"description\": \"Order Notifications.\\n\\n---\\n\\n\",\n    \"title\": \"AcmeOrderNotifications\",\n    \"x-view\": \"provider\",\n    \"version\": \"1\"\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/RegressionOrderNotifications",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"RegressionOrderNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"RegressionOrderNotifications\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"AcmeOrderNotifications_PRODUCT\",\n  \"displayName\": \"AcmeOrderNotifications_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"AcmeOrderNotifications_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"AcmeOrderNotifications_APP\",\n  \"internalName\": \"AcmeOrderNotifications_APP\",    \n  \"displayName\": \"AcmeOrderNotifications App\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"AcmeOrderNotifications_PRODUCT\",\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"AcmeOrderNotifications1\",\n      \"consumerSecret\": \"AcmeOrderNotifications1\"\n    }\n  },\n  \"webHooks\":\n    [{\"uri\": \"http://www.solace.com:80\", \"method\":\"POST\"}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Async API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/AcmeOrderNotifications_APP/apis/RegressionOrderNotifications?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"AcmeOrderNotifications_APP",
								"apis",
								"RegressionOrderNotifications"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/AcmeOrderNotifications_APP",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"AcmeOrderNotifications_APP"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/AcmeOrderNotifications_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"AcmeOrderNotifications_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Test API Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/RegressionOrderNotifications",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"RegressionOrderNotifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "16 Webhook Trusted CNs",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  },\n  \"webHooks\":\n    [{\"uri\": \"http://www.solace.com:80\", \"method\":\"POST\", \n    \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": [\"*.solace.com\",\"cloud.solace.com\"]\n    }}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Trusted CNs present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"trusted CN present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"cloud.solace.com\");",
									"});",
									"pm.test(\"trusted CN present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"*.solace.com\");",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}/restConsumers/Consumer/tlsTrustedCommonNames",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}",
								"restConsumers",
								"Consumer",
								"tlsTrustedCommonNames"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "17 Async API By API Product",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Generated Async API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains JMS binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"bindings:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"jms:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    pm.expect(pm.response.text()).to.include(\"exclusive\");",
									"    var queueName = `${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"",
									" });",
									"",
									" pm.test(\"Contains MQTT binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"bindings:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"mqtt:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"qos:\");",
									"",
									" });",
									"",
									"",
									" pm.test(\"Contains Solace binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"bindings:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"solace:\") &&",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    pm.expect(pm.response.text()).to.include(\"exclusive\");",
									"    var queueName = `${pm.environment.get(\"API_NAME\")}_PRODUCT`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"",
									" });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT/apis/{{API_NAME}}?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "18 Validate App Response",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  },\n  \"webHooks\":\n    [{\"uri\": \"http://www.solace.com:80\", \"method\":\"POST\"}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains AppEnvironment Display Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].displayName).to.eql(\"dev display\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  },\n  \"webHooks\":\n    [{\"uri\": \"http://www.solace.com:80\", \"method\":\"POST\"}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "19 Disallow envs with same service id",
			"item": [
				{
					"name": "Add Dev2 Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{CONNECTOR_ENV}}2\",\n  \"displayName\": \"{{CONNECTOR_ENV}}2 display\",\n  \"description\": \"{{CONNECTOR_ENV}}2 environment\",\n  \"serviceId\": \"{{BROKER_ID}}\",\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{CONNECTOR_PASSWORD}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{CONNECTOR_USERNAME}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "20 Reference Resources",
			"item": [
				{
					"name": "API is not referenced",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"[]\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "API is referenced",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns one reference\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"Reference is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    var exp = pm.environment.get(\"API_NAME\")+'_PRODUCT';",
									"    pm.expect(jsonData[0].displayName).to.eql(exp);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Env is referenced",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns one reference\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"Reference is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    var exp = pm.environment.get(\"API_NAME\")+'_PRODUCT';",
									"    pm.expect(jsonData[0].displayName).to.eql(exp);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Product is referenced",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns one reference\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"Reference is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].displayName).to.eql(pm.environment.get(\"APP_NAME\"));",
									"",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Product is not referenced",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns one reference\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "API is not referenced Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"[]\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}",
								"apiProducts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "21 WebHook Creation for env fails",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create WebHook Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  },\n  \"webHooks\": [\n    {\n      \"uri\": \"http://sandbox.apigw.acme.com/my-resource/is-a-very-long-one?param1=superlongparam\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"environments\": [\n        \"{{CONNECTOR_ENV}}\"\n      ],\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": [\n          \"zxxxxx\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Dev Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Prod Not Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add WebHook Prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"webHooks\": [\n    {\n      \"uri\": \"http://prod.apigw.acme.com/my-resource/is-a-very-long-one?param1=superlongparam\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"environments\": [\n        \"{{PROD_CONNECTOR_ENV}}\"\n      ],\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": [\n          \"prodprod\"\n        ]\n      }\n    },\n       {\n      \"uri\": \"http://sandbox.apigw.acme.com/my-resource/is-a-very-long-one?param1=superlongparam\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"environments\": [\n        \"{{CONNECTOR_ENV}}\"\n      ],\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": [\n          \"zxxxxx\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Dev Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Prod Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Found\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove WebHook Dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"webHooks\": [\n    {\n      \"uri\": \"http://prod.apigw.acme.com/my-resource/is-a-very-long-one?param1=superlongparam\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"environments\": [\n        \"{{PROD_CONNECTOR_ENV}}\"\n      ],\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": [\n          \"prodprod\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Dev Not Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Prod Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Found\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create WebHook All Envs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"webHooks\": [\n    {\n      \"uri\": \"http://sandbox.apigw.acme.com/my-resource/is-a-very-long-one?param1=superlongparam\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": [\n          \"zxxxxx\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Dev Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check RDP Prod Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Found\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/restDeliveryPoints/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"restDeliveryPoints",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "22 SMF binding in Async API",
			"item": [
				{
					"name": "Patch Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n   },\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    },\n        {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API spec from product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"API_YAML\"));",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/x-yaml');",
									"});",
									"",
									"pm.test(\"Contains SMF server\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dev-smf\");",
									"});",
									"",
									"pm.test(\"Contains JMS server\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dev-secure-jms\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/{{API_NAME}}?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API spec YAML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(postman.getEnvironmentVariable(\"API_YAML\"));",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/x-yaml');",
									"});",
									"",
									"pm.test(\"Contains SMF binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"solace:\");",
									"});",
									"",
									"pm.test(\"Doesn't contain JMS binding\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"jms\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/{{API_NAME}}?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status includes queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has queue\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].queues.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/status",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "23 App Status",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create without webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch with webhook (all envs) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"webHooks\":\n    [{\"uri\": \"http://www.solace.com:80/\", \"method\":\"POST\"}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status includes webbhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has web hook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains webhook URI\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks[0].uri).to.eql('http://www.solace.com:80/');",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/status",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with webhook (dev env)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"webHooks\":\n    [{\"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\", \"method\":\"POST\", \"environments\": [\"dev\"]}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status includes webbhook Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has web hook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains webhook URI\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks[0].uri).to.eql('http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1');",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/status",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "24 App 2 products, one env webhook only",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT\",\n  \"displayName\": \"SayHello_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create without webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"SayHello_PRODUCT\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"approved\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch with webhook (all envs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apiProducts\": [\n    \"SayHello_PRODUCT\"\n  ],\n  \"displayName\": \"sayHello5\",\n  \"webHooks\": [\n    {\n      \"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"environments\": [\n        \"dev\"\n      ],\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": []\n      }\n    },\n    {\n      \"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"environments\": [\n        \"prod\"\n      ],\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": []\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status includes webbhook Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has web hook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains webhook URI\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks[0].uri).to.eql('http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1');",
									"});",
									"",
									"pm.test(\"Contains webhook URI\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[1].webHooks[0].uri).to.eql('http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1');",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/status",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Dev Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch with webhook (dev env) Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apiProducts\": [\n    \"SayHello_PRODUCT\"\n  ],\n  \"displayName\": \"sayHello5\",\n  \"webHooks\": [\n    {\n      \"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\",\n      \"method\": \"POST\",\n      \"mode\": \"serial\",\n      \"environments\": [\n        \"dev\"\n      ],\n      \"tlsOptions\": {\n        \"tlsTrustedCommonNames\": []\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status includes webbhook Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has web hook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains webhook URI\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].webHooks[0].uri).to.eql('http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1');",
									"});",
									"",
									"pm.test(\"Doesn't contain prod webhook URI\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[1]).to.not.have.property('webHooks');",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/status",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod Queue Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is missing\", function () {",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"    });",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "25 App - Duplicate API Products",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT\",\n  \"displayName\": \"SayHello_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status client error\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message correct\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"should NOT have duplicate items\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"SayHello_PRODUCT\",\n    \"SayHello_PRODUCT\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "26 App - AutoCreate developer",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT\",\n  \"displayName\": \"SayHello_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"SayHello_PRODUCT\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/developers/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"developers",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Developer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/developers/{{TEAM_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"developers",
								"{{TEAM_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/developers/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"developers",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Developer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/developers/{{TEAM_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"developers",
								"{{TEAM_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "27 Multiple API Products - check combined ACL",
			"item": [
				{
					"name": "Create API Product1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\"\n  ],\n  \"approvalType\": \"auto\",\n\n  \"description\": \"SayHelloSub_PRODUCT\",\n  \"displayName\": \"SayHelloSub_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHelloSub_PRODUCTA\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"accessLevel\": \"internal\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n\n  \"description\": \"SayHelloPub_PRODUCT\",\n  \"displayName\": \"SayHelloPub_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHelloPub_PRODUCTB\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"accessLevel\": \"public\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"accessLevel\": \"private\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\",     \n    \"SayHelloSub_PRODUCTA\",\n    \"SayHelloPub_PRODUCTB\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Present Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check ACL Pub Exceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"say/hello\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/publishTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"publishTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check ACL Sub Exceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"say/hello\");",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"traxens/feed\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod ACL Sub Exceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"say/hello\");",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"traxens/feed\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apiProducts\": [\n    \"SayHelloSub_PRODUCTA\",\n    \"SayHelloPub_PRODUCTB\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod ACL Sub Exceptions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.include('NOT_FOUND');",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHelloSub_PRODUCTA",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHelloSub_PRODUCTA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHelloPub_PRODUCTB",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHelloPub_PRODUCTB"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "28 Patch with precondition",
			"item": [
				{
					"name": "Create API Product1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHelloSub_PRODUCT\",\n  \"displayName\": \"SayHelloSub_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHelloSub_PRODUCTA\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"accessLevel\": \"internal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"28_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"SayHelloSub_PRODUCTA\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{28_ETag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"The new display name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH app etag failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(412);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{28_ETag}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"Another new display name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH app no etag, no protection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "If-Match",
								"value": "{{28_ETag}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"The new display name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHelloSub_PRODUCTA",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHelloSub_PRODUCTA"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "29 Filters",
			"item": [
				{
					"name": "Create API Product1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHelloSub_PRODUCT\",\n  \"displayName\": \"SayHelloSub_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHelloSub_PRODUCTA\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"accessLevel\": \"internal\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHelloPub_PRODUCT\",\n  \"displayName\": \"SayHelloPub_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHelloPub_PRODUCTB\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"accessLevel\": \"public\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"manual\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"accessLevel\": \"private\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find hello in dev",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Hello\");",
									"    pm.expect(pm.response.text()).to.include(\"dev\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts?filter=\"dev\" \"hello\"",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"dev\" \"hello\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "No product in prod with hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts?filter=\"prod\" \"hello\"",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"prod\" \"hello\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find products offering SMF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts?filter=\"smf\"",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"smf\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"viewer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\",     \n    \"SayHelloSub_PRODUCTA\",\n    \"SayHelloPub_PRODUCTB\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  },\n  \"attributes\": [\n     {\n          \"name\": \"PORTAL.RBAC.ROLE\",\n          \"value\": \"viewer\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find app with custom attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check number of results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps?filter=\"PORTAL.RBAC.ROLE\" \"viewer\"",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"PORTAL.RBAC.ROLE\" \"viewer\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "No app with custom attribute admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check number of results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps?filter=\"PORTAL.RBAC.ROLE\" \"admin\"",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"PORTAL.RBAC.ROLE\" \"admin\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find sensorValue in API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check number of results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?filter=sensorValue",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "filter",
									"value": "sensorValue"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHelloSub_PRODUCTA",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHelloSub_PRODUCTA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHelloPub_PRODUCTB",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHelloPub_PRODUCTB"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "30 APIs Paging/Sorting",
			"item": [
				{
					"name": "Get APIs Page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains one result\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains expected API name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.eql(pm.environment.get(\"API_NAME\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=1&pageSize=1",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs Page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains one result\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains expected API name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.eql('SayHelloPub');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=2&pageSize=1",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs Page 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains one result\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains expected API name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.eql('SayHello');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=3&pageSize=1",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "3"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs Invalid Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"YReturns zero results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=99&pageSize=1",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "99"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs Desc, Invalid sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains 3 results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Contains expected API names\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.eql(pm.environment.get(\"API_NAME\"));",
									"    pm.expect(jsonData[1]).to.eql('SayHelloPub');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=1&pageSize=10&sortDirection=asc",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "sortFieldName",
									"value": "name",
									"disabled": true
								},
								{
									"key": "sortDirection",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs Desc, Invalid sort property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Conatins 3 results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Contains expected API names\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.eql(pm.environment.get(\"API_NAME\"));",
									"    pm.expect(jsonData[1]).to.eql('SayHelloPub');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=1&pageSize=10&sortFieldName=missing&sortDirection=asc",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "sortFieldName",
									"value": "missing"
								},
								{
									"key": "sortDirection",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs Page 3 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"COntains 1 result\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains expected API name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.eql('SayHello');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=3&pageSize=1",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "3"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs Page Desc, page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains 1 result\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Contains expected API name\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData[0]).to.eql('SayHello');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=2&pageSize=2&sortFieldName=name&sortDirection=desc",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "2"
								},
								{
									"key": "sortFieldName",
									"value": "name"
								},
								{
									"key": "sortDirection",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs  Sort Summary By Source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains 2 results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Contains expected API names\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql(pm.environment.get(\"API_NAME\"));",
									"    pm.expect(jsonData[1].name).to.eql('SayHelloPub');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=1&pageSize=2&sortFieldName=source&sortDirection=asc&format=summary",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								},
								{
									"key": "sortFieldName",
									"value": "source"
								},
								{
									"key": "sortDirection",
									"value": "asc"
								},
								{
									"key": "format",
									"value": "summary"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APIs  Sort Extended By CreatedTime Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains 3 results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Contains expected API names\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('SayHello');",
									"    pm.expect(jsonData[1].name).to.eql('SayHelloPub');",
									"    pm.expect(jsonData[2].name).to.eql(pm.environment.get(\"API_NAME\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis?pageNumber=1&pageSize=100&sortFieldName=createdTime&sortDirection=desc&format=extended",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "100"
								},
								{
									"key": "sortFieldName",
									"value": "createdTime"
								},
								{
									"key": "sortDirection",
									"value": "desc"
								},
								{
									"key": "format",
									"value": "extended"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "31 SMF/JMS binding no subscriptions",
			"item": [
				{
					"name": "Patch Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n   },\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    },\n        {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Not Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APi Product AsyncAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains no queue info\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"queue.name\");",
									"});",
									"",
									"pm.test(\"Contains deliveryMode persistent\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"deliveryMode: persistent\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/SayHello?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"SayHello"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App AsyncAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains no queue info\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"queue.name\");",
									"});",
									"",
									"pm.test(\"Contains deliveryMode persistent\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"deliveryMode: persistent\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/SayHello?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"SayHello"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Not Found APi Product AsyncAPI Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No clientInformation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clientInformation).to.eql(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add API to API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\",\n      \"SayHelloPub\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APi Product AsyncAPI Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains queue info\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    let qName = pm.environment.get(\"API_NAME\") + '_PRODUCT2';",
									"    pm.expect(pm.response.text()).to.include(qName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reprovision App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 412\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"{{APP_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning Copy 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has clientInformation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clientInformation).to.not.eql(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"PRODUCT2\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Has subscrioption\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].subscriptionTopic).to.eql('say/hello');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2/subscriptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App AsyncAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains queue info\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    let qName = pm.environment.get(\"APP_NAME_INTERNAL\") + '-' + pm.environment.get(\"API_NAME\") + '_PRODUCT2';",
									"    pm.expect(pm.response.text()).to.include(qName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "32 App API Product Level Approval",
			"item": [
				{
					"name": "Reset Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT\",\n  \"displayName\": \"SayHello_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT2\",\n  \"displayName\": \"SayHello_PRODUCT2\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app failure (api product approval status)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status client error\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\",\n          \"status\": \"pending\"\n      },\n      { \n          \"apiproduct\": \"SayHello_PRODUCT2\"\n      }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\"\n      },\n      { \n          \"apiproduct\": \"SayHello_PRODUCT2\"\n      }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check API Products Referenced By Apps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains referenced app\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"App os pending\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('pending');",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"approved\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Not present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include('NOT_FOUND');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch approve one product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"apiProducts\": [\n        {\n            \"apiproduct\": \"SayHello_PRODUCT\",\n            \"status\": \"approved\"\n        },\n        {\n            \"apiproduct\": \"SayHello_PRODUCT2\"\n        }\n    ],\n  \"displayName\": \"sayHello5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status includes webbhook Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"API Product is approved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.apiProducts[0]).to.have.property('status');",
									"});",
									"",
									"pm.test(\"API Product is approved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.apiProducts[0].status).to.equal('approved');",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Subscriptions Present Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Body contains subscribe exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"say/hello\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Publish Subscription Not Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Body not contains publish exception\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"say/hello\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/publishTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"publishTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch approve both products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"apiProducts\": [\n        {\n            \"apiproduct\": \"SayHello_PRODUCT\",\n            \"status\": \"approved\"\n        },\n        {\n            \"apiproduct\": \"SayHello_PRODUCT2\",\n            \"status\": \"approved\"\n        }\n    ],\n  \"displayName\": \"sayHello5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Publish Subscription Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Body contains publish exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"say/hello\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/publishTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"publishTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch revoke one product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"apiProducts\": [\n        {\n            \"apiproduct\": \"SayHello_PRODUCT\",\n            \"status\": \"revoked\"\n        },\n        {\n            \"apiproduct\": \"SayHello_PRODUCT2\",\n            \"status\": \"approved\"\n        }\n    ],\n  \"displayName\": \"sayHello5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Subscriptions Present Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Body doesn't contains subscribe exception\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"say/hello\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "33 API Versions",
			"item": [
				{
					"name": "Patch API - SemVer Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1.1.0\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API - SemVer Success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Version number is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.version).to.eql(\"1.1.0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}/info",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API - SemVer Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status COnflict 409 - Invalid version\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1.1.0\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API SayHelloPub success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "components:\n  schemas:\n    HelloWorldSayHello: &ref_0\n      default: {}\n      $schema: http://json-schema.org/draft-07/schema\n      examples:\n        - greeting: hello\n          name: solace\n      description: A simple hello world schema\n      additionalProperties: false\n      type: object\n      title: The root schema\n      required:\n        - greeting\n        - name\n      properties:\n        greeting:\n          default: ''\n          examples:\n            - hello\n          description: The greeting\n          type: string\n          title: The greeting schema\n          $id: '#/properties/greeting'\n        name:\n          default: ''\n          examples:\n            - solace\n          description: The name.\n          type: string\n          title: The name schema\n          $id: '#/properties/name'\n      $id: http://example.com/example.json\n      x-parser-schema-id: HelloWorldSayHello\n  messages:\n    SayHello: &ref_1\n      payload: *ref_0\n      description: ''\n      schemaFormat: application/vnd.aai.asyncapi;version=2.0.0\n      contentType: application/json\nchannels:\n  say/hello:\n    publish:\n      message: *ref_1\nasyncapi: 2.0.0\ninfo:\n  description: ''\n  title: SayHelloPub\n  x-view: provider\n  version: '2'\n  x-origin:\n    vendor: solace\n    name: event-portal\nx-parser-spec-parsed: true",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/SayHelloPub",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"SayHelloPub"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API SayHelloPub success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Version number is updated in API Info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.version).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/SayHelloPub/info",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"SayHelloPub",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API SayHello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.info.version).to.eql(\"v144 (1.2.0)\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "components:\n  schemas:\n    HelloWorldSayHello: &ref_0\n      default: {}\n      $schema: http://json-schema.org/draft-07/schema\n      examples:\n        - greeting: hello\n          name: solace\n      description: <p>A simple hello world schema</p>\n      additionalProperties: false\n      type: object\n      title: The root schema\n      required:\n        - greeting\n        - name\n      properties:\n        greeting:\n          default: ''\n          examples:\n            - hello\n          description: The greeting\n          type: string\n          title: The greeting schema\n          $id: '#/properties/greeting'\n        name:\n          default: ''\n          examples:\n            - solace\n          description: The name.\n          type: string\n          title: The name schema\n          $id: '#/properties/name'\n      $id: http://example.com/example.json\n      x-parser-schema-id: HelloWorldSayHello\n  messages:\n    SayHello: &ref_1\n      payload: *ref_0\n      description: ''\n      schemaFormat: application/vnd.aai.asyncapi;version=2.0.0\n      contentType: application/json\nchannels:\n  say/hello:\n    subscribe:\n      message: *ref_1\nasyncapi: 2.0.0\ninfo:\n  description: This API says hello --- Hello\n  title: SayHello\n  x-view: provider\n  version: v144\n  x-origin:\n    vendor: solace\n    name: event-portal\nx-parser-spec-parsed: true",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/SayHello",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"SayHello"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{CONNECTOR_PASSWORD}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{CONNECTOR_USERNAME}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "34  API Products referencing API versions",
			"item": [
				{
					"name": "Patch API - SemVer Success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1.1.0\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello@1.1.0-v1\"\n  ],\n  \"approvalType\": \"auto\",\n\n  \"description\": \"SayHelloSub_PRODUCT\",\n  \"displayName\": \"SayHelloSub_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHelloSub_PRODUCTA\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"accessLevel\": \"internal\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n\n  \"description\": \"SayHelloPub_PRODUCT\",\n  \"displayName\": \"SayHelloPub_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHelloPub_PRODUCTB\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"accessLevel\": \"public\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}@1.0.0\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"accessLevel\": \"private\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API Product3 APIs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get 1 API name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\",     \n    \"SayHelloSub_PRODUCTA\",\n    \"SayHelloPub_PRODUCTB\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get app's Async API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/{{API_NAME}}@1.0.0",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"{{API_NAME}}@1.0.0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get app's api list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"get 3 APIs\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Present Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check ACL Pub Exceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"say/hello\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/publishTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"publishTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check ACL Sub Exceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"say/hello\");",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"traxens/feed\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod ACL Sub Exceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"APP_NAME_INTERNAL\"));",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"say/hello\");",
									"});",
									"",
									"pm.test(\"Has exception\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"traxens/feed\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}/subscribeTopicExceptions",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}",
								"subscribeTopicExceptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apiProducts\": [\n    \"SayHelloSub_PRODUCTA\",\n    \"SayHelloPub_PRODUCTB\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Prod ACL Sub Exceptions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.include('NOT_FOUND');",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product3 multi Api versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}@1.0.0\",\n      \"{{API_NAME}}@1.1.0\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH app Multi version product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"   \n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHelloSub_PRODUCTA",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHelloSub_PRODUCTA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHelloPub_PRODUCTB",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHelloPub_PRODUCTB"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "35 WebHooks Resource",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT\",\n  \"displayName\": \"SayHello_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create without webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"SayHello_PRODUCT\"\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Webhooks (no result)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Empty array (no webnooks\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Web Hook for dev env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('dev');",
									"    pm.expect(jsonData.method).to.eql('POST');",
									"    pm.expect(jsonData.environments[0]).to.eql('dev');",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\":\"dev\",\n  \"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\",\n  \"method\": \"POST\",\n  \"mode\": \"serial\",\n  \"environments\": [\n    \"dev\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attemtp to add duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\":\"dev\",\n  \"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\",\n  \"method\": \"POST\",\n  \"mode\": \"serial\",\n  \"environments\": [\n    \"dev\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Webhooks dev added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Expect dev webhook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check webhooks on app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has one webhook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.webHooks.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Web Hook for prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('prod');",
									"    pm.expect(jsonData.method).to.eql('POST');",
									"    pm.expect(jsonData.environments[0]).to.eql('prod');",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\":\"prod\",\n  \"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\",\n  \"method\": \"POST\",\n  \"mode\": \"parallel\",\n  \"environments\": [\n    \"prod\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Webhooks prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Expect dev webhook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check webhooks on app Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has one webhook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.webHooks.length).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Web Hook for dev env Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check returned JSON\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('dev');",
									"    pm.expect(jsonData.method).to.eql('PUT');",
									"    pm.expect(jsonData.environments[0]).to.eql('dev');",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uri\": \"http://webhook.site/86865d51-3e31-4f5c-af79-7a0295b234e1\",\n  \"method\": \"PUT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks/dev",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks",
								"dev"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Webhooks dev patched",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Expect dev webhook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('dev');",
									"    pm.expect(jsonData.method).to.eql('PUT');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks/dev",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks",
								"dev"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete prod webhook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks/prod",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks",
								"prod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check webhook deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Expect dev webhook\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}/webHooks",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}",
								"webHooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "webhook-dev-app-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"47c8c456-5a98-4ba7-8d49-f87412ede8ec\",\n    \"displayName\": \"auto w guaranteed msging\",\n    \"apiProducts\": [\n    ],\n    \"internalName\": \"myInternalName\",\n    \"webHooks\": [\n        {\n            \"uri\": \"http://my.webhooks.dev/my-webhook-resource\",\n            \"name\": \"webhook-dev\",\n            \"environments\": [\n                \"dev\"\n            ],\n            \"method\": \"POST\",\n            \"mode\": \"serial\"\n        }\n    ],\n    \"credentials\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/developers/master.user@async-apim-devel.com/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"developers",
								"master.user@async-apim-devel.com",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "webhook-dev-get-by-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/developers/master.user@async-apim-devel.com/apps/47c8c456-5a98-4ba7-8d49-f87412ede8ec/webHooks/webhook-dev",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"developers",
								"master.user@async-apim-devel.com",
								"apps",
								"47c8c456-5a98-4ba7-8d49-f87412ede8ec",
								"webHooks",
								"webhook-dev"
							]
						}
					},
					"response": []
				},
				{
					"name": "webhook-dev-app-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/developers/master.user@async-apim-devel.com/apps/47c8c456-5a98-4ba7-8d49-f87412ede8ec",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"developers",
								"master.user@async-apim-devel.com",
								"apps",
								"47c8c456-5a98-4ba7-8d49-f87412ede8ec"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "36 API Versions Duplicate Key",
			"item": [
				{
					"name": "Import API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"source\": \"EventAPIProduct\",\n  \"id\": \"t83018e8c1g\",\n  \"overwrite\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch without incrementing version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status invalid version number 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"AcmeApiError-1\": {\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme Api Error\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"timestamp\"\n            ],\n            \"properties\": {\n              \"timestamp\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"errorId\",\n              \"errorDetails\"\n            ],\n            \"properties\": {\n              \"errorId\": {\n                \"title\": \"errorId\",\n                \"type\": \"string\"\n              },\n              \"errorDetails\": {\n                \"title\": \"errorDetails\",\n                \"type\": \"object\"\n              }\n            }\n          }\n        }\n      },\n      \"AcmeOrder\": {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme New Order event\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"timestamp\"\n            ],\n            \"properties\": {\n              \"timestamp\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"bu_id\",\n              \"order_id\",\n              \"details\"\n            ],\n            \"properties\": {\n              \"details\": {\n                \"title\": \"order details\",\n                \"type\": \"object\"\n              },\n              \"bu_id\": {\n                \"title\": \"business unit\",\n                \"type\": \"string\"\n              },\n              \"order_id\": {\n                \"title\": \"order_id\",\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"$id\": \"http://localhost:8811/acme/new-order.schema.json\"\n      }\n    },\n    \"messages\": {\n      \"AcmeNewOrder\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/AcmeOrder\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeApiError\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/AcmeApiError-1\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeUpdateOrder\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/AcmeOrder\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"acme/apim/{bu_id}/{order_id}/update\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/AcmeUpdateOrder\"\n        }\n      },\n      \"parameters\": {\n        \"bu_id\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"auto\",\n              \"whitegoods\",\n              \"e_bike\"\n            ]\n          }\n        },\n        \"order_id\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"acme/apim/error\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/AcmeApiError\"\n        }\n      }\n    },\n    \"acme/apim/{bu_id}/create\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/AcmeNewOrder\"\n        }\n      },\n      \"parameters\": {\n        \"bu_id\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"auto\",\n              \"whitegoods\",\n              \"e_bike\"\n            ]\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-09-12 10:03 UTC\",\n    \"description\": \"Consumer API for Order Notifications.\\n\\n---\\n\\n\",\n    \"title\": \"AcmeOrderNotifications-Consumer\",\n    \"x-view\": \"provider\",\n    \"version\": \"1\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"apim-connector\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/AcmeOrderNotifications-Consumer",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"AcmeOrderNotifications-Consumer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch increment version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"AcmeApiError-1\": {\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme Api Error\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"timestamp\"\n            ],\n            \"properties\": {\n              \"timestamp\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"errorId\",\n              \"errorDetails\"\n            ],\n            \"properties\": {\n              \"errorId\": {\n                \"title\": \"errorId\",\n                \"type\": \"string\"\n              },\n              \"errorDetails\": {\n                \"title\": \"errorDetails\",\n                \"type\": \"object\"\n              }\n            }\n          }\n        }\n      },\n      \"AcmeOrder\": {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"description\": \"\",\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"title\": \"Acme New Order event\",\n        \"required\": [\n          \"header\",\n          \"body\"\n        ],\n        \"properties\": {\n          \"header\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"timestamp\"\n            ],\n            \"properties\": {\n              \"timestamp\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"body\": {\n            \"additionalProperties\": false,\n            \"type\": \"object\",\n            \"required\": [\n              \"bu_id\",\n              \"order_id\",\n              \"details\"\n            ],\n            \"properties\": {\n              \"details\": {\n                \"title\": \"order details\",\n                \"type\": \"object\"\n              },\n              \"bu_id\": {\n                \"title\": \"business unit\",\n                \"type\": \"string\"\n              },\n              \"order_id\": {\n                \"title\": \"order_id\",\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"$id\": \"http://localhost:8811/acme/new-order.schema.json\"\n      }\n    },\n    \"messages\": {\n      \"AcmeNewOrder\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/AcmeOrder\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeApiError\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/AcmeApiError-1\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"AcmeUpdateOrder\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/AcmeOrder\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"acme/apim/{bu_id}/{order_id}/update\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/AcmeUpdateOrder\"\n        }\n      },\n      \"parameters\": {\n        \"bu_id\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"auto\",\n              \"whitegoods\",\n              \"e_bike\"\n            ]\n          }\n        },\n        \"order_id\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"acme/apim/error\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/AcmeApiError\"\n        }\n      }\n    },\n    \"acme/apim/{bu_id}/create\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/AcmeNewOrder\"\n        }\n      },\n      \"parameters\": {\n        \"bu_id\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"auto\",\n              \"whitegoods\",\n              \"e_bike\"\n            ]\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-09-12 10:03 UTC\",\n    \"description\": \"Consumer API for Order Notifications.\\n\\n---\\n\\n\",\n    \"title\": \"AcmeOrderNotifications-Consumer\",\n    \"x-view\": \"provider\",\n    \"version\": \"2\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"apim-connector\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/AcmeOrderNotifications-Consumer",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"AcmeOrderNotifications-Consumer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check APiInfos version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.version).to.eql(\"2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/AcmeOrderNotifications-Consumer/info",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"AcmeOrderNotifications-Consumer",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/AcmeOrderNotifications-Consumer",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"AcmeOrderNotifications-Consumer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "37 CredentialsExpiry and Rotation",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\"\n  ],\n  \"approvalType\": \"manual\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{APP_NAME}}_PRODUCT\",\n  \"displayName\": \"{{APP_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{APP_NAME}}_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check consumerSecret was generated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.credentials.secret.consumerSecret.length).to.eql(16);",
									"    pm.globals.set(\"37_postApp_secret\", jsonData.credentials.secret.consumerSecret);",
									"});",
									"",
									"pm.test(\"Check issuedAt and expiryDate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.credentials.expiresAt-jsonData.credentials.issuedAt).to.eql(100*1000);",
									"    pm.globals.set(\"37_postApp_issuedAt\", `${jsonData.credentials.issuedAt}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",  \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 100,\n  \"apiProducts\": [\n    \"{{APP_NAME}}_PRODUCT\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"webHooks\": [\n    {\n      \"uri\": \"https://mock.com.local/callback\",\n      \"environments\": [\n        \"{{CONNECTOR_ENV}}\"\n      ],\n      \"method\": \"POST\",\n      \"mode\": \"parallel\",\n      \"authentication\": {\n        \"username\": \"donald\",\n        \"password\": \"duck1234\"\n      }\n    }\n  ],\n  \"credentials\": {\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Regenerate Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check consumerSecret was generated\", function () {",
									"    var jsonData = pm.response.json();",
									"    var oldSecret = pm.globals.get(\"37_postApp_secret\");",
									"    pm.expect(jsonData.credentials.secret.consumerSecret.length).to.eql(16);",
									"    pm.expect(jsonData.credentials.secret.consumerSecret).to.not.eql(oldSecret);",
									"});",
									"",
									"pm.test(\"Check issuedAt and expiryDate\", function () {",
									"    var jsonData = pm.response.json();",
									"    var oldIssuedAt = parseInt(pm.globals.get(\"37_postApp_issuedAt\"));",
									"    pm.expect(jsonData.credentials.expiresAt-jsonData.credentials.issuedAt).to.eql(100*1000);",
									"    pm.expect(jsonData.credentials.issuedAt).to.be.greaterThan(oldIssuedAt);",
									"    pm.globals.clear();",
									"    pm.globals.set(\"37_postApp_issuedAt\", `${jsonData.credentials.issuedAt}`);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credentials\": {\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"approved\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check consumerSecret was set\", function () {",
									"    var jsonData = pm.response.json();",
									"    var oldSecret = pm.environment.get(\"CONSUMER_SECRET\");",
									"    pm.expect(jsonData.credentials.secret.consumerSecret).to.eql(oldSecret);",
									"});",
									"",
									"pm.test(\"Check issuedAt and expiryDate\", function () {",
									"    var jsonData = pm.response.json();",
									"    var oldIssuedAt = parseInt(pm.globals.get(\"37_postApp_issuedAt\"));",
									"    pm.expect(jsonData.credentials.expiresAt-jsonData.credentials.issuedAt).to.eql(100*1000);",
									"    pm.expect(jsonData.credentials.issuedAt).to.be.greaterThan(oldIssuedAt);",
									"    pm.globals.clear();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credentials\": {\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}_new\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{APP_NAME}}_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{APP_NAME}}_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "38 MQTT Session and Client Profile",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"apis\":[\"{{API_NAME}}\"],\"approvalType\":\"auto\",\"accessLevel\":\"private\",\"displayName\":\"mqtt-qos-1\",\"name\":\"1f6d8a2f-13a9-47a6-973c-e4e939a82b7e\",\"description\":\"mqtt-qos-1\",\"pubResources\":[],\"subResources\":[],\"attributes\":[{\"name\":\"_AP_BUSINESS_GROUP_OWNING_ID_\",\"value\":\"rjgu-devel\"},{\"name\":\"_AP_BUSINESS_GROUP_OWNING_DISPLAY_NAME_\",\"value\":\"RJGU-DEVEL\"},{\"name\":\"_AP_BUSINESS_GROUP_SHARING_LIST_\",\"value\":\"[]\"},{\"name\":\"_AP_ASSET_OWNER_ID_\",\"value\":\"master.user@async-apim-devel.com\"},{\"name\":\"_AP_LIFECYLE_STATE_\",\"value\":\"released\"}],\"environments\":[\"dev\"],\"protocols\":[{\"name\":\"mqtt\",\"version\":\"3.1.1\"},{\"name\":\"secure-mqtt\",\"version\":\"3.1.1\"}],\"clientOptions\":{\"guaranteedMessaging\":{\"requireQueue\":true,\"accessType\":\"exclusive\",\"maxTtl\":1,\"maxMsgSpoolUsage\":1}},\"meta\":{\"version\":\"1.0.0\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"b9d4d653-08ba-476d-b111-2cdbd5ddc681\",\n  \"displayName\": \"mqtt-qos-1-with-client-profile\",\n  \"apiProducts\": [\n    {\n      \"apiproduct\": \"1f6d8a2f-13a9-47a6-973c-e4e939a82b7e\"\n    }\n  ],\n  \"credentials\": {\n    \"secret\": {\n      \"consumerKey\": \"i9VtJ0SVbweHlQYTC2HrfNSgHY6CnajX\",\n      \"consumerSecret\": \"dWxtmby37hbFmdb6\"\n    },\n    \"expiresAt\": -1\n  },\n  \"internalName\": \"62zOE8k29GhHPr0ZLcNd7FcFlospJZZw\",\n  \"expiresIn\": 15552000000\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker ACL Present Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    pm.expect(pm.response.text()).to.include('62zOE8k29GhHPr0ZLcNd7FcFlospJZZw');",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/aclProfiles/62zOE8k29GhHPr0ZLcNd7FcFlospJZZw",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"aclProfiles",
								"62zOE8k29GhHPr0ZLcNd7FcFlospJZZw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker MQTT Session Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct client id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.mqttSessionClientId).to.eql('62zOE8k29GhHPr0ZLcNd7FcFlospJZZw');",
									"});",
									"",
									"pm.test(\"Correct queue max ttl\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.queueMaxTtl).to.eql(3600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/mqttSessions/62zOE8k29GhHPr0ZLcNd7FcFlospJZZw,primary",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"mqttSessions",
								"62zOE8k29GhHPr0ZLcNd7FcFlospJZZw,primary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/b9d4d653-08ba-476d-b111-2cdbd5ddc681",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"b9d4d653-08ba-476d-b111-2cdbd5ddc681"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/1f6d8a2f-13a9-47a6-973c-e4e939a82b7e",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"1f6d8a2f-13a9-47a6-973c-e4e939a82b7e"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "39  API Product Stages",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT\",\n  \"displayName\": \"SayHello_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"meta\": {\n      \"version\": \"1.1.0\",\n      \"stage\": \"draft\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - keep draft",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.2.0\",\n    \"stage\": \"draft\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - no stage provided success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"displayName\": \"SayHello_App Updated\",\n   \"meta\": {\n    \"version\": \"1.2.5\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\"\n      },\n      { \n          \"apiproduct\": \"SayHello_PRODUCT2\"\n      }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - retire failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.3.0\",\n    \"stage\": \"retired\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - release",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.3.0\",\n    \"stage\": \"released\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\"\n      }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - retire failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.4.0\",\n    \"stage\": \"retired\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - deprecated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.4.0\",\n    \"stage\": \"deprecated\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning Copy 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/5",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update app success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \n  \"displayName\": \"{{APP_NAME}} Patch\",\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\"\n      }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}2\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\"\n      }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app no products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}2\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update app failure - add deprecated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\"\n      }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - draft failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.4.0\",\n    \"stage\": \"draft\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - release",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.5.0\",\n    \"stage\": \"released\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - deprecated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.6.0\",\n    \"stage\": \"deprecated\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - retired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"1.7.0\",\n    \"stage\": \"retired\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create app failure Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}2\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n      { \n          \"apiproduct\": \"SayHello_PRODUCT\"\n      }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - deprecate failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n   \"displayName\": \"SayHello_PRODUCT\",\n   \"meta\": {\n    \"version\": \"2.0.0\",\n    \"stage\": \"deprecated\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "40 Derived API Product",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check meta\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.createdBy).to.eql('elmo');",
									"    pm.expect(jsonData.meta.lastModifiedBy).to.eql('elmo');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"manual\",\n\n  \"description\": \"SayHello_PRODUCT\",\n  \"displayName\": \"SayHello_PRODUCT\",\n  \"environments\": [\n    \"{{CONNECTOR_ENV}}\",\n    \"{{PROD_CONNECTOR_ENV}}\"\n  ],\n  \"name\": \"SayHello_PRODUCT\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 3600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"attributes\": [],\n  \"meta\": {\n      \"version\": \"1.1.0\",\n      \"stage\": \"draft\",\n      \"createdBy\": \"elmo\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clone API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check meta\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.createdBy).to.eql('ernie');",
									"    pm.expect(jsonData.meta.lastModifiedBy).to.eql('bert');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"names\":{\n  \"displayName\": \"SayHello_PRODUCT_2022\",\n  \"name\": \"SayHello_PRODUCT_2022\"\n },\n  \"meta\": {\n      \"createdBy\": \"ernie\",\n      \"lastModifiedBy\": \"bert\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT/derived",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT",
								"derived"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Clone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check derivedfrom is set\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.derivedFrom.displayName).to.eql('SayHello_PRODUCT');",
									"    pm.expect(jsonData.meta.derivedFrom.name).to.eql('SayHello_PRODUCT');",
									"    pm.expect(jsonData.meta.derivedFrom.revision).to.eql('1.1.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"SayHello_PRODUCT 2022\",\n  \"name\": \"SayHello_PRODUCT_2022\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT_2022",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT_2022"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Derived By Parent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check derived object is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0].name).to.eql('SayHello_PRODUCT_2022');",
									"    pm.expect(jsonData[0].displayName).to.eql('SayHello_PRODUCT_2022');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT/derived",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT",
								"derived"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete derived API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT_2022",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT_2022"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Derived By Parent After delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check derived object is deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT/derived",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT",
								"derived"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clone API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"names\":{\n  \"displayName\": \"SayHello_PRODUCT_2022\",\n  \"name\": \"SayHello_PRODUCT_2022\"\n}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT/derived",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT",
								"derived"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Derived By Parent After delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT/derived",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT",
								"derived"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete derived API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/SayHello_PRODUCT_2022",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"SayHello_PRODUCT_2022"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "41 Cascading App Updates",
			"item": [
				{
					"name": "Patch Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n   },\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\",\n    \"prod\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    },\n        {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product) 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}1\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}1\",    \n  \"displayName\": \"{{APP_NAME}}1\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}1\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product) 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}2\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}2\",    \n  \"displayName\": \"{{APP_NAME}}2\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}2\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product) 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}3\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}3\",    \n  \"displayName\": \"{{APP_NAME}}3\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}3\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product) 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}4\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}4\",    \n  \"displayName\": \"{{APP_NAME}}4\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}4\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET App Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has clientInformation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clientInformation).to.not.eql(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App AsyncAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains queue info\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    let qName = pm.environment.get(\"APP_NAME_INTERNAL\") + '-' + pm.environment.get(\"API_NAME\") + '_PRODUCT2';",
									"    pm.expect(pm.response.text()).to.include(qName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APi Product AsyncAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains no queue info\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"queue.name\");",
									"});",
									"",
									"pm.test(\"Contains deliveryMode persistent\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"deliveryMode: persistent\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/SayHello?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"SayHello"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get APi Product AsyncAPI Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains queue info\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"queue:\");",
									"    let qName = pm.environment.get(\"API_NAME\") + '_PRODUCT2';",
									"    pm.expect(pm.response.text()).to.include(qName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"PRODUCT2\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Has subscrioption\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].subscriptionTopic).to.eql('say/hello');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2/subscriptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove API from  API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"SayHello\"\n  ],\n    \"environments\": [\n    \"dev\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reprovision App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 412\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"{{APP_NAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No clientInformation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clientInformation).to.eql(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App AsyncAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains no queue info\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"queue.name\");",
									"});",
									"",
									"pm.test(\"Contains deliveryMode persistent\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"deliveryMode: persistent\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/SayHello?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"SayHello"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Not Found APi Product AsyncAPI Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check ACL removed prod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Has subscrioption\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.error.status).to.eql('NOT_FOUND');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PROD_BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{PROD_BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROD_BROKER_BASEURL}}/msgVpns/{{PROD_CLOUD_VPN}}/aclProfiles/{{APP_NAME_INTERNAL}}",
							"host": [
								"{{PROD_BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{PROD_CLOUD_VPN}}",
								"aclProfiles",
								"{{APP_NAME_INTERNAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Not Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning Copy 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}1",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}3",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}4",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "42 API Info Updates",
			"item": [
				{
					"name": "Patch API - Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Modified by updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.lastModifiedBy).to.eql('harry');",
									"});",
									"",
									"pm.test(\"Is deprecated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deprecated).to.eql(true);",
									"});",
									"",
									"pm.test(\"Unsupported meta elements are ignored\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.1.0');",
									"    pm.expect(jsonData.meta.stage).to.eql('released');",
									"});",
									"",
									"pm.test(\"Attributes were saved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attributes.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": [\n    {\n      \"name\": \"access\",\n      \"value\": \"public\"\n    }\n  ], \n  \"meta\": {\n        \"version\": \"10.0.0\",\n        \"createdBy\": \"tom\",\n        \"lastModifiedBy\": \"harry\",\n        \"stage\": \"retired\"\n    }\n    ,\n    \"deprecated\": true,\n    \"deprecatedDescription\": \"payloads retired\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}/info",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}",
								"info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "43 Per APi Queues",
			"item": [
				{
					"name": "Patch Dev Env Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"exposedProtocols\": [\n    {\n      \"name\": \"secure-mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"mqtt\",\n      \"version\": \"3.1.1\"\n    },\n    {\n      \"name\": \"http\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"https\",\n      \"version\": \"1.1\"\n    },\n    {\n      \"name\": \"jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n   },\n    {\n      \"name\": \"smf\",\n      \"version\": \"smf\"\n   },\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    },\n        {\n      \"name\": \"secure-jms\",\n      \"version\": \"1.1\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"queueGranularity\": \"api\",\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API spec from product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/x-yaml');",
									"});",
									"",
									"pm.test(\"Contains SMF server\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dev-smf\");",
									"});",
									"",
									"pm.test(\"Contains JMS server\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dev-secure-jms\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/{{API_NAME}}?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SayHello API spec from product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/x-yaml');",
									"});",
									"",
									"pm.test(\"Contains SMF server\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dev-smf\");",
									"});",
									"",
									"pm.test(\"Contains JMS server\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dev-secure-jms\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Product Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"queueGranularity\": \"api\",\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create App (with product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clientInformation.length).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}\",    \n  \"displayName\": \"{{APP_NAME}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API spec YAML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/x-yaml');",
									"});",
									"",
									"pm.test(\"Contains SMF binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"solace:\");",
									"});",
									"",
									"pm.test(\"Doesn't contain JMS binding\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"jms\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/{{API_NAME}}?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"{{API_NAME}}"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SayHello API spec YAML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/x-yaml');",
									"});",
									"",
									"pm.test(\"Contains SMF binding\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"solace:\");",
									"});",
									"",
									"pm.test(\"Doesn't contain JMS binding\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"jms\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/apis/SayHelloPub?format=application%2Fx-yaml",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"apis",
								"SayHelloPub"
							],
							"query": [
								{
									"key": "format",
									"value": "application%2Fx-yaml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check app status includes queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has queue\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.environments[0].queues.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apps/{{APP_NAME}}/status",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apps",
								"{{APP_NAME}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT2-${pm.environment.get(\"API_NAME\")}`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check API subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Has subscription\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].subscriptionTopic).to.eql('traxens/feed/*/v1/E1/*/>');",
									"});",
									"pm.test(\"Has expected number of subscriptions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}/subscriptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker SayHello Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT2-SayHelloPub`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-SayHelloPub",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-SayHelloPub"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check SayHello subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Has subscrioption\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].subscriptionTopic).to.eql('say/hello');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-SayHelloPub/subscriptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-SayHelloPub",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product - Switch to Product Queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"queueGranularity\": \"apiProduct\",\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait for async app provisioning Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/10",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check API Product Queue Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ACL is present\", function () {",
									"    var queueName = `${pm.environment.get(\"APP_NAME_INTERNAL\")}-${pm.environment.get(\"API_NAME\")}_PRODUCT2`;",
									"    pm.expect(pm.response.text()).to.include(queueName);",
									"});",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Subscriptions on Product Queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Has subscription\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].subscriptionTopic).to.eql('traxens/feed/*/v1/E1/*/>');",
									"});",
									"pm.test(\"Has subscrioption\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[2].subscriptionTopic).to.eql('say/hello');",
									"});",
									"pm.test(\"Has expected number of subscriptions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2/subscriptions",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker Queue Not present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Broker SayHello Queue Not present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2-{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps/{{APP_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps",
								"{{APP_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check API Product Queue Not present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Queue is not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
									"});",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{BROKER_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{BROKER_USER}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BROKER_BASEURL}}/msgVpns/{{CLOUD_VPN}}/queues/{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2",
							"host": [
								"{{BROKER_BASEURL}}"
							],
							"path": [
								"msgVpns",
								"{{CLOUD_VPN}}",
								"queues",
								"{{APP_NAME_INTERNAL}}-{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "44 API Product (Internal Version) - Attributes Resource",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [{\n    \"name\":\"attribute01\",\n    \"value\": \"value01\"\n    }\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"queueGranularity\": \"api\",\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attribute - Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value01\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attribute - Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute - Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is already set for\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value01_UPDATE",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value02\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value02",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product - check attributes and version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attributes.length).to.eql(2);",
									"    pm.expect(jsonData.attributes[1].name).to.eql(\"attribute02\");",
									"});",
									"",
									"pm.test(\"Check version incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.2.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value02_update\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value02_update",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value03",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute03",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute03"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product - check attributes and version Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attributes.length).to.eql(2);",
									"    pm.expect(jsonData.attributes[1].value).to.eql(\"value02_update\");",
									"});",
									"",
									"pm.test(\"Check version incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.3.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute03",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute03"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "45 API Product (External Version) - Attributes Resource",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [{\n    \"name\":\"attribute01\",\n    \"value\": \"value01\"\n    }\n  ],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"queueGranularity\": \"api\",\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"meta\": {\n      \"version\" : \"1.0.0\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attribute - Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value01\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attribute - Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute - Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is already set for\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value01_UPDATE",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value02\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value02",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product - check attributes and version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attributes.length).to.eql(2);",
									"    pm.expect(jsonData.attributes[1].name).to.eql(\"attribute02\");",
									"});",
									"",
									"pm.test(\"Check version incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.1.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value02_update\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value02_update",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value03",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute03",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute03"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product - check attributes and version Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attributes.length).to.eql(2);",
									"    pm.expect(jsonData.attributes[1].value).to.eql(\"value02_update\");",
									"});",
									"",
									"pm.test(\"Check version incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.2.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute03",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute03"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "46 API Product Meta Attributes",
			"item": [
				{
					"name": "Create API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"apis\": [\n      \"{{API_NAME}}\",\n      \"SayHelloPub\"\n  ],\n  \"approvalType\": \"auto\",\n  \"attributes\": [],\n  \"description\": \"{{API_NAME}}_PRODUCT\",\n  \"displayName\": \"{{API_NAME}}_PRODUCT\",\n  \"environments\": [\n    \"dev\"\n  ],\n  \"name\": \"{{API_NAME}}_PRODUCT2\",\n  \"pubResources\": [\n  ],\n  \"subResources\": [\n  ],\n  \"protocols\": [\n    {\n      \"name\": \"smfs\",\n      \"version\": \"smfs\"\n    }\n\n  ],\n  \"clientOptions\": {\n    \"guaranteedMessaging\": {\n      \"requireQueue\": true,\n      \"queueGranularity\": \"api\",\n      \"accessType\": \"exclusive\",\n      \"maxTtl\": 600,\n      \"maxMsgSpoolUsage\": 50\n    }\n  },\n  \"meta\": {\n      \"version\" : \"1.0.0\",\n        \"attributes\": [{\n            \"name\":\"attribute01\",\n            \"value\": \"value01\"\n        }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attribute - Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"value01\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attribute - Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute -Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value01_UPDATE\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value01_UPDATE",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute - Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is already set for\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value01_UPDATE",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value02\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value02",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute - Success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value02\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value02",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute05",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute05"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute - Success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute05",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute05"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product - check attributes and version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.attributes.length).to.eql(2);",
									"    pm.expect(jsonData.meta.attributes[1].name).to.eql(\"attribute02\");",
									"});",
									"",
									"pm.test(\"Check version not incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.0.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"value02_update\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value02_update",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "value03",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute03",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute03"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is not set\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute03",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute03"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2/meta/attributes/attribute02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2",
								"meta",
								"attributes",
								"attribute02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product - check attributes and version Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.attributes.length).to.eql(1);",
									"    pm.expect(jsonData.meta.attributes[0].value).to.eql(\"value01_UPDATE\");",
									"});",
									"",
									"pm.test(\"Check version incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.0.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product Add versioned attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attributes.length).to.eql(1);",
									"    pm.expect(jsonData.attributes[0].value).to.eql(\"Shady\");",
									"});",
									"",
									"pm.test(\"Check meta attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.attributes.length).to.eql(1);",
									"    pm.expect(jsonData.meta.attributes[0].value).to.eql(\"value01_UPDATE\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": [{\n      \"name\": \"nameIs\",\n      \"value\": \"Shady\"}\n      ],\n  \"meta\": {\n      \"version\": \"1.1.0\" \n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product overwrite meta attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": [{\n      \"name\": \"nameIs\",\n      \"value\": \"Shady\"}],\n  \"meta\": {\n      \"version\": \"1.2.0\" ,\n    \"attributes\": [{\n      \"name\": \"nameIs\",\n      \"value\": \"Bond\"}] \n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product - check attributes and version Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attributes.length).to.eql(1);",
									"    pm.expect(jsonData.attributes[0].value).to.eql(\"Shady\");",
									"});",
									"",
									"pm.test(\"Check meta attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.attributes.length).to.eql(1);",
									"    pm.expect(jsonData.meta.attributes[0].value).to.eql(\"Bond\");",
									"});",
									"",
									"pm.test(\"Check version incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta.version).to.eql('1.2.0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch API Product Add duplicate meta attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": [{\n      \"name\": \"nameIs\",\n      \"value\": \"Shady\"}],\n  \"meta\": {\n      \"version\": \"1.3.0\" ,\n    \"attributes\": [\n        {\n      \"name\": \"nameIs\",\n      \"value\": \"Bond\"},\n        {\n      \"name\": \"nameIs\",\n      \"value\": \"Bond\"}\n      ] \n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apiProducts/{{API_NAME}}_PRODUCT2",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apiProducts",
								"{{API_NAME}}_PRODUCT2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "General Tear Down",
			"item": [
				{
					"name": "Delete API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"components\": {\n    \"schemas\": {\n      \"SensorEvent\": {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"description\": \"\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"communicationDate\": {\n            \"type\": \"integer\"\n          },\n          \"signedCommunication\": {\n            \"type\": \"boolean\"\n          },\n          \"events\": {\n            \"type\": \"array\",\n            \"items\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"array\",\n                \"items\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"tripPlanId\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorName\": {\n                        \"type\": \"string\"\n                      },\n                      \"communicationType\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventType\": {\n                        \"type\": \"string\"\n                      },\n                      \"gps\": {\n                        \"type\": \"string\"\n                      },\n                      \"sensorValues\": {\n                        \"type\": \"array\",\n                        \"items\": [\n                          {\n                            \"type\": \"string\"\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"Uncertainty\": {\n                                \"type\": \"string\"\n                              },\n                              \"Compass Direction\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"Uncertainty\",\n                              \"Compass Direction\"\n                            ]\n                          }\n                        ]\n                      },\n                      \"sensorValue\": {\n                        \"type\": \"string\"\n                      },\n                      \"deviceSerialNumber\": {\n                        \"type\": \"string\"\n                      },\n                      \"eventDate\": {\n                        \"type\": \"integer\"\n                      },\n                      \"sensorId\": {\n                        \"type\": \"integer\"\n                      }\n                    },\n                    \"required\": [\n                      \"deviceSerialNumber\",\n                      \"eventDate\",\n                      \"eventType\",\n                      \"communicationType\",\n                      \"gps\",\n                      \"sensorName\",\n                      \"sensorValue\",\n                      \"sensorValues\",\n                      \"tripPlanId\",\n                      \"sensorId\"\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          \"deviceSerialNumber\": {\n            \"type\": \"string\"\n          },\n          \"validatedSignature\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"events\",\n          \"deviceSerialNumber\",\n          \"communicationDate\",\n          \"signedCommunication\",\n          \"validatedSignature\"\n        ]\n      }\n    },\n    \"messages\": {\n      \"GeoSensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      },\n      \"SensorEvent\": {\n        \"payload\": {\n          \"$ref\": \"#/components/schemas/SensorEvent\"\n        },\n        \"description\": \"\",\n        \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n        \"contentType\": \"application/json\"\n      }\n    }\n  },\n  \"servers\": {},\n  \"channels\": {\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{sensor}/{sensorvalue}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/SensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"HUMIDITY\",\n              \"LIGHT\",\n              \"DOOR\",\n              \"GEOFENCE\"\n            ]\n          }\n        },\n        \"sensorvalue\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"traxens/feed/{shippingline}/v1/{equipmentId}/{geosensor}/{longitude}\": {\n      \"publish\": {\n        \"message\": {\n          \"$ref\": \"#/components/messages/GeoSensorEvent\"\n        }\n      },\n      \"parameters\": {\n        \"geosensor\": {\n          \"schema\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"GEOPOSITIONING\"\n            ]\n          }\n        },\n        \"shippingline\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"equipmentId\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        \"longitude\": {\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"asyncapi\": \"2.0.0\",\n  \"info\": {\n    \"x-generated-time\": \"2021-07-15 15:03 UTC\",\n    \"description\": \"\",\n    \"title\": \"WebSub API\",\n    \"x-view\": \"provider\",\n    \"version\": \"1\",\n    \"x-origin\": {\n      \"vendor\": \"solace\",\n      \"name\": \"event-portal\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/apis/{{API_NAME}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"apis",
								"{{API_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/environments/{{CONNECTOR_ENV}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"environments",
								"{{CONNECTOR_ENV}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\": \"{{CLOUD_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OrganizationTests",
			"item": [
				{
					"name": "Update org with BaseURLs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\":{\n\t\t\"eventPortal\": {\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0/eventPortal\"\n\t\t},\n\t\t\"cloud\":{\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0\"\n\t\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update org with one token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\":{\n\t\t\"eventPortal\": {\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0/eventPortal\"\n\n\t\t},\n\t\t\"cloud\":{\n\t\t\t\"baseUrl\": \"{{CLOUD_BASE_URL}}\",\n            \"token\":\"{{CLOUD_TOKEN}}\"\n\t\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update org with Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\":{\n\t\t\"eventPortal\": {\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0/eventPortal\",\n\t\t\t\"token\":\"{{EP_TOKEN}}\"\n\t\t},\n\t\t\"cloud\":{\n\t\t\t\"baseUrl\": \"{{CLOUD_BASE_URL}}\",\n\t\t\t\"token\": \"{{CLOUD_TOKEN}}\"\n\t\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update org with BaseURLs Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\":{\n\t\t\"eventPortal\": {\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0/eventPortal\"\n\t\t},\n\t\t\"cloud\":{\n\t\t\t\"baseUrl\": \"{{CLOUD_BASE_URL}}\"\n\t\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update org with invalid BaseURLs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body contains Invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{TENANT}}\",\n  \"cloud-token\":{\n\t\t\"eventPortal\": {\n\t\t\t\"baseUrl\": \"https://consolex.solace.cloud/api/v0/eventPortal\"\n\t\t},\n\t\t\"cloud\":{\n\t\t\t\"baseUrl\": \"https://api.solace.cloud/api/v0\"\n\t\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/{{TENANT}}",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"{{TENANT}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orgs Task Tests",
			"item": [
				{
					"name": "Create Org 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-03\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 04",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-04\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-05\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 06",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-06\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 07",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-07\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 08",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-08\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 09",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-09\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-10\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-11\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-12\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Org Deletes",
			"item": [
				{
					"name": "Delete org01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-02",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-02"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-03",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-03"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org04",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-04",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-04"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-05",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-05"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org06",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-06",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-06"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org07",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-07",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-07"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org08",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-08",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-08"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org09",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-09",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-09"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-10",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-11",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-12",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-12"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Apps Loop",
			"item": [
				{
					"name": "Create App (with product) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var value = pm.environment.get(\"app_count\");",
									"",
									"if( !value) {",
									"    pm.environment.set(\"app_count\", 1);",
									"} else {",
									"    var value = pm.environment.get(\"app_count\");",
									"    pm.environment.set(\"app_count\", value+1);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{APP_NAME}}{{app_count}}\",\n  \"internalName\": \"{{APP_NAME_INTERNAL}}{{app_count}}\",    \n  \"displayName\": \"{{APP_NAME}}{{app_count}}\",\n  \"expiresIn\": 0,\n  \"apiProducts\": [\n    \"{{API_NAME}}_PRODUCT2\"\n  ],\n  \"attributes\": [\n    {\n      \"name\": \"equipmentId\",\n      \"value\": \"E1,E2\"\n    }\n  ],\n  \"credentials\": {\n    \"expiresAt\": -1,\n    \"issuedAt\": 0,\n    \"secret\": {\n      \"consumerKey\": \"{{CONSUMER_KEY}}{{app_count}}\",\n      \"consumerSecret\": \"{{CONSUMER_SECRET}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/{{TENANT}}/teams/{{TEAM_NAME}}/apps",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"{{TENANT}}",
								"teams",
								"{{TEAM_NAME}}",
								"apps"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Org Loop",
			"item": [
				{
					"name": "Create Org 01 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Has etag and save etag\", function() {",
									"    pm.response.to.have.header('ETag');",
									"    let headerValue = pm.response.headers.get(\"ETag\");",
									"    pm.globals.set(\"01_Setup_ETag\", headerValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"org-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org01 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{CONNECTOR_ADMIN_PWD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{CONNECTOR_ADMIN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{CONNECTOR_BASEURL}}/organizations/org-01",
							"host": [
								"{{CONNECTOR_BASEURL}}"
							],
							"path": [
								"organizations",
								"org-01"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{CONNECTOR_PASSWORD}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{CONNECTOR_USERNAME}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}